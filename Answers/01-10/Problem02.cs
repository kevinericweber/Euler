using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Euler
{
    /* PROBLEM 2 - Even Fibonacci numbers
     * Each new term in the Fibonacci sequence is generated by adding the previous two terms.
     * By starting with 1 and 2, the first 10 terms will be:
     *      1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
     * By considering the terms in the Fibonacci sequence whose values do not exceed four million,
     * find the sum of the even-valued terms.
    */
    public class Problem02 : testableAnswer
    {
        public override string GetAnswer()
        {
            int answer = GetAnswerWithMaxVal(4000000);
            return answer.ToString();
        }

        private int GetAnswerWithMaxVal(int maxFibonacciTerm)
        {
            // this code is a bit debatable.  It's more efficient... but at the cost of requiring some additional math knowledge
            // Anyway, the speedup is due to it not figuring out *every* fibonacci number,
            // but every *third* number.  (because Odd+Odd=Even; Odd+Even=Odd; Even+Odd=Odd, repeat back to Odd+Odd=Even)
            // The original formula F[n] = F[n-1] + F[n-2] can be morphed into: F[n] = 4*F[n-3] + F[n-6]
            //           [n] = [n-1] + [n-2]
            //                [n-1] = [n-2] + [n-3]
            //           [n] = 2x[n-2] + [n-3]
            //                [n-2] = [n-3] + [n-4]
            //           [n] = 3x[n-3] + 2x[n-4]
            //                [n-4] = [n-3] - [n-5]
            //           [n] = 4x[n-3] + [n-4] - [n-5]
            //                [n-6] = [n-4] - [n-5]
            //           [n] = 4x[n-3] + [n-6]

            int firstEvenValue = 0; // we do it this way so we can initialize our sum to 0.
            int secondEvenValue = 2;
            int prev = firstEvenValue;
            int current = secondEvenValue;
            int sum = 0;

            while (current <= maxFibonacciTerm)
            {
                sum += current;
                int next = 4 * current + prev;
                prev = current;
                current = next;
            }
            return sum;
        }

        public override bool KnownTestPasses()
        {
            int expected = 2 + 8 + 34 + 144;
            int actual = GetAnswerWithMaxVal(200);
            return (actual == expected);
        }
    }
}
